# Squirrel Eat Squirrel (a 2D Katamari Damacy clone)
# By Al Sweigart al@inventwithpython.com
# http://inventwithpython.com/pygame
# Released under a "Simplified BSD" license

import random, sys, time, math, pygame
from pygame.locals import *


螢幕刷新週期 = 30 
螢幕寬 = 640 
螢幕高 = 480 
半_螢幕寬 = int(螢幕寬 / 2)
半_螢幕高 = int(螢幕高 / 2)

草地顏色 = (24, 255, 0)
白色 = (255, 255, 255)
紅色 = (255, 0, 0)

鏡頭初始位置 = 90     
玩家移動速率 = 9        
玩家彈跳速率 = 6      
玩家彈跳高度 = 30   
玩家初始大小 = 25      
玩家得勝大小 = 300        
玩家需多久不被其餘松鼠攻擊 = 2       
遊戲結束狀態顯示時間 = 4    
玩家初始血量條 = 3        

草堆數量 = 80       
活動範圍中松鼠數量 = 30    
松鼠最慢移動速率 = 3 
松鼠最快移動速率 = 7 
移動方向改變頻率 = 2    
左 = '_左'
右 = '_右'

範圍=range
離開=QUIT
按鍵_下=KEYDOWN
按鍵_上=KEYUP
鍵_上=K_UP
鍵_w=K_w
鍵_下=K_DOWN
鍵_s=K_s
鍵_左=K_LEFT
鍵_a=K_a
鍵_右=K_RIGHT
鍵_d=K_d
鍵_r=K_r
按鍵_ESC=K_ESCAPE



def 主程式():
    global 螢幕刷新時間依據, 遊戲內容設定, 基本設置, 向左_松鼠_圖, 向右_松鼠_圖, 草堆_圖

    pygame.init()
    螢幕刷新時間依據 = pygame.time.Clock()
    pygame.display.set_icon(pygame.image.load('gameicon.png'))
    遊戲內容設定 = pygame.display.set_mode((螢幕寬, 螢幕高))
    pygame.display.set_caption('松鼠吃了松鼠')
    基本設置 = pygame.font.Font('freesansbold.ttf', 32)

   
    向左_松鼠_圖 = pygame.image.load('squirrel.png')
    向右_松鼠_圖 = pygame.transform.flip(向左_松鼠_圖, True, False)
    草堆_圖 = []
    for 次 in 範圍(1, 5):
        草堆_圖.append(pygame.image.load('grass%s.png' % 次))

    while True:
        執行遊戲()


def 執行遊戲():
    
    玩家是否損血 = False  
    玩家損血時間 = 0 
    玩家是否輸 = False      
    玩家輸的時間 = 0    
    玩家是否贏 = False           

    
    遊戲結束畫面設置 = 基本設置.render('Game Over', True, 白色)
    遊戲結束畫面方框 = 遊戲結束畫面設置.get_rect()
    遊戲結束畫面方框.center = (半_螢幕寬, 半_螢幕高)

    遊戲勝利畫面 = 基本設置.render('You have achieved OMEGA SQUIRREL!', True, 白色)
    遊戲勝利畫面方框 = 遊戲勝利畫面.get_rect()
    遊戲勝利畫面方框.center = (半_螢幕寬, 半_螢幕高)

    遊戲勝利畫面_2 = 基本設置.render('(Press "r" to restart.)', True, 白色)
    遊戲勝利畫面方框_2 = 遊戲勝利畫面_2.get_rect()
    遊戲勝利畫面方框_2.center = (半_螢幕寬, 半_螢幕高 + 30)

    
    鏡頭位置_橫軸 = 0
    鏡頭位置_縱軸 = 0

    物件_草堆 = []    
    物件_非玩家的松鼠 = [] 
   
    物件_玩家松鼠 = {'圖_玩家松鼠': pygame.transform.scale(向左_松鼠_圖, (玩家初始大小, 玩家初始大小)),
                 '面向哪': 左,
                 '大小': 玩家初始大小,
                 '橫軸': 半_螢幕寬,
                 '縱軸': 半_螢幕高,
                 '彈跳':0,
                 '血量': 玩家初始血量條}

    左移  = False
    右移 = False
    上移    = False
    下移  = False

   
    for 次 in 範圍(10):
        物件_草堆.append(設置草堆(鏡頭位置_橫軸, 鏡頭位置_縱軸))
        物件_草堆[次]['橫軸'] = random.randint(0, 螢幕寬)
        物件_草堆[次]['縱軸'] = random.randint(0, 螢幕高)

    while True: 
       
        if 玩家是否損血 and time.time() - 玩家損血時間 > 玩家需多久不被其餘松鼠攻擊:
            玩家是否損血 = False

        
        for 非玩家的松鼠 in 物件_非玩家的松鼠:
            
            非玩家的松鼠['橫軸'] += 非玩家的松鼠['橫向移動單位']
            非玩家的松鼠['縱軸'] += 非玩家的松鼠['縱向移動單位']
            非玩家的松鼠['彈跳'] += 1
            if 非玩家的松鼠['彈跳'] > 非玩家的松鼠['彈跳次數間隔']:
                非玩家的松鼠['彈跳'] = 0 

           
            if random.randint(0, 99) < 移動方向改變頻率:
                非玩家的松鼠['橫向移動單位'] = 產生_隨機速率()
                非玩家的松鼠['縱向移動單位'] = 產生_隨機速率()
                if 非玩家的松鼠['橫向移動單位'] > 0: 
                    非玩家的松鼠['圖_玩家松鼠'] = pygame.transform.scale(向右_松鼠_圖, (非玩家的松鼠['寬'], 非玩家的松鼠['高']))
                else: 
                    非玩家的松鼠['圖_玩家松鼠'] = pygame.transform.scale(向左_松鼠_圖, (非玩家的松鼠['寬'], 非玩家的松鼠['高']))


        
        for 次 in 範圍(len(物件_草堆) - 1, -1, -1):
            if 是否超出鏡頭範圍(鏡頭位置_橫軸, 鏡頭位置_縱軸, 物件_草堆[次]):
                del 物件_草堆[次]
        for 次 in 範圍(len(物件_非玩家的松鼠) - 1, -1, -1):
            if 是否超出鏡頭範圍(鏡頭位置_橫軸, 鏡頭位置_縱軸, 物件_非玩家的松鼠[次]):
                del 物件_非玩家的松鼠[次]

       
        while len(物件_草堆) < 草堆數量:
            物件_草堆.append(設置草堆(鏡頭位置_橫軸, 鏡頭位置_縱軸))
        while len(物件_非玩家的松鼠) < 活動範圍中松鼠數量:
            物件_非玩家的松鼠.append(產生_新松鼠(鏡頭位置_橫軸, 鏡頭位置_縱軸))

        
        鏡頭位置_玩家_橫軸 = 物件_玩家松鼠['橫軸'] + int(物件_玩家松鼠['大小'] / 2)
        鏡頭位置_玩家_縱軸 = 物件_玩家松鼠['縱軸'] + int(物件_玩家松鼠['大小'] / 2)
        if (鏡頭位置_橫軸 + 半_螢幕寬) - 鏡頭位置_玩家_橫軸 > 鏡頭初始位置:
            鏡頭位置_橫軸 = 鏡頭位置_玩家_橫軸 + 鏡頭初始位置 - 半_螢幕寬
        elif 鏡頭位置_玩家_橫軸 - (鏡頭位置_橫軸 + 半_螢幕寬) > 鏡頭初始位置:
            鏡頭位置_橫軸 = 鏡頭位置_玩家_橫軸 - 鏡頭初始位置 - 半_螢幕寬
        if (鏡頭位置_縱軸 + 半_螢幕高) - 鏡頭位置_玩家_縱軸 > 鏡頭初始位置:
            鏡頭位置_縱軸 = 鏡頭位置_玩家_縱軸 + 鏡頭初始位置 - 半_螢幕高
        elif 鏡頭位置_玩家_縱軸 - (鏡頭位置_縱軸 + 半_螢幕高) > 鏡頭初始位置:
            鏡頭位置_縱軸 = 鏡頭位置_玩家_縱軸 - 鏡頭初始位置 - 半_螢幕高

       
        遊戲內容設定.fill(草地顏色)

        
        for 草堆 in 物件_草堆:
            草堆顯示框 = pygame.Rect( (草堆['橫軸'] - 鏡頭位置_橫軸,
                                  草堆['縱軸'] - 鏡頭位置_縱軸,
                                  草堆['寬'],
                                  草堆['高']) )
            遊戲內容設定.blit(草堆_圖[草堆['圖_草堆']], 草堆顯示框)


       
        for 非玩家的松鼠 in 物件_非玩家的松鼠:
            非玩家的松鼠['rect'] = pygame.Rect( (非玩家的松鼠['橫軸'] - 鏡頭位置_橫軸,
                                         非玩家的松鼠['縱軸'] - 鏡頭位置_縱軸 - 取_有關彈跳的數據(非玩家的松鼠['彈跳'], 非玩家的松鼠['彈跳次數間隔'], 非玩家的松鼠['彈跳高度']),
                                         非玩家的松鼠['寬'],
                                         非玩家的松鼠['高']) )
            遊戲內容設定.blit(非玩家的松鼠['圖_玩家松鼠'], 非玩家的松鼠['rect'])


        
        玩家損血後_閃爍 = round(time.time(), 1) * 10 % 2 == 1
        if not 玩家是否輸 and not (玩家是否損血 and 玩家損血後_閃爍):
            物件_玩家松鼠['rect'] = pygame.Rect( (物件_玩家松鼠['橫軸'] - 鏡頭位置_橫軸,
                                              物件_玩家松鼠['縱軸'] - 鏡頭位置_縱軸 - 取_有關彈跳的數據(物件_玩家松鼠['彈跳'], 玩家彈跳速率, 玩家彈跳高度),
                                              物件_玩家松鼠['大小'],
                                              物件_玩家松鼠['大小']) )
            遊戲內容設定.blit(物件_玩家松鼠['圖_玩家松鼠'], 物件_玩家松鼠['rect'])


        
        顯示血量條(物件_玩家松鼠['血量'])

        for event in pygame.event.get(): 
            if event.type == 離開:
                離開遊戲()

            elif event.type == 按鍵_下:
                if event.key in (鍵_上, 鍵_w):
                    下移 = False
                    上移 = True
                elif event.key in (鍵_下, 鍵_s):
                    上移 = False
                    下移 = True
                elif event.key in (鍵_左, 鍵_a):
                    右移 = False
                    左移 = True
                    if 物件_玩家松鼠['面向哪'] != 左: 
                        物件_玩家松鼠['圖_玩家松鼠'] = pygame.transform.scale(向左_松鼠_圖, (物件_玩家松鼠['大小'], 物件_玩家松鼠['大小']))
                    物件_玩家松鼠['面向哪'] = 左
                elif event.key in (鍵_右, 鍵_d):
                    左移 = False
                    右移 = True
                    if 物件_玩家松鼠['面向哪'] != 右:
                        物件_玩家松鼠['圖_玩家松鼠'] = pygame.transform.scale(向右_松鼠_圖, (物件_玩家松鼠['大小'], 物件_玩家松鼠['大小']))
                    物件_玩家松鼠['面向哪'] = 右
                elif 玩家是否贏 and event.key == 鍵_r:
                    return

            elif event.type == 按鍵_上:
                
                if event.key in (鍵_左, 鍵_a):
                    左移 = False
                elif event.key in (鍵_右, 鍵_d):
                    右移 = False
                elif event.key in (鍵_上, 鍵_w):
                    上移 = False
                elif event.key in (鍵_下, 鍵_s):
                    下移 = False

                elif event.key == 按鍵_ESC:
                    離開遊戲()

        if not 玩家是否輸:
           
            if 左移:
                物件_玩家松鼠['橫軸'] -= 玩家移動速率
            if 右移:
                物件_玩家松鼠['橫軸'] += 玩家移動速率
            if 上移:
                物件_玩家松鼠['縱軸'] -= 玩家移動速率
            if 下移:
                物件_玩家松鼠['縱軸'] += 玩家移動速率

            if (左移 or 右移 or 上移 or 下移) or 物件_玩家松鼠['彈跳'] != 0:
                物件_玩家松鼠['彈跳'] += 1

            if 物件_玩家松鼠['彈跳'] > 玩家彈跳速率:
                物件_玩家松鼠['彈跳'] = 0 

          
            for 次 in 範圍(len(物件_非玩家的松鼠)-1, -1, -1):
                非玩家松鼠們 = 物件_非玩家的松鼠[次]
                if 'rect' in 非玩家松鼠們 and 物件_玩家松鼠['rect'].colliderect(非玩家松鼠們['rect']):
                   

                    if 非玩家松鼠們['寬'] * 非玩家松鼠們['高'] <= 物件_玩家松鼠['大小']**2:
                        
                        物件_玩家松鼠['大小'] += int( (非玩家松鼠們['寬'] * 非玩家松鼠們['高'])**0.2 ) + 1
                        del 物件_非玩家的松鼠[次]

                        if 物件_玩家松鼠['面向哪'] == 左:
                            物件_玩家松鼠['圖_玩家松鼠'] = pygame.transform.scale(向左_松鼠_圖, (物件_玩家松鼠['大小'], 物件_玩家松鼠['大小']))
                        if 物件_玩家松鼠['面向哪'] == 右:
                            物件_玩家松鼠['圖_玩家松鼠'] = pygame.transform.scale(向右_松鼠_圖, (物件_玩家松鼠['大小'], 物件_玩家松鼠['大小']))

                        if 物件_玩家松鼠['大小'] > 玩家得勝大小:
                            玩家是否贏 = True 

                    elif not 玩家是否損血:
                        
                        玩家是否損血 = True
                        玩家損血時間 = time.time()
                        物件_玩家松鼠['血量'] -= 1
                        if 物件_玩家松鼠['血量'] == 0:
                            玩家是否輸 = True 
                            玩家輸的時間 = time.time()
        else:
            
            遊戲內容設定.blit(遊戲結束畫面設置, 遊戲結束畫面方框)
            if time.time() - 玩家輸的時間 > 遊戲結束狀態顯示時間:
                return 

        
        if 玩家是否贏:
            遊戲內容設定.blit(遊戲勝利畫面, 遊戲勝利畫面方框)
            遊戲內容設定.blit(遊戲勝利畫面_2, 遊戲勝利畫面方框_2)

        pygame.display.update()
        螢幕刷新時間依據.tick(螢幕刷新週期)




def 顯示血量條(目前血量):
    for 次 in 範圍(目前血量): 
        pygame.draw.rect(遊戲內容設定, 紅色,   (15, 5 + (10 * 玩家初始血量條) - 次 * 10, 20, 10))
    for 次 in 範圍(玩家初始血量條): 
        pygame.draw.rect(遊戲內容設定, 白色, (15, 5 + (10 * 玩家初始血量條) - 次 * 10, 20, 10), 1)


def 離開遊戲():
    pygame.quit()
    sys.exit()


def 取_有關彈跳的數據(目前_彈跳, 目前_彈跳間隔, 目前_彈跳高度):
    return int(math.sin( (math.pi / float(目前_彈跳間隔)) * 目前_彈跳 ) * 目前_彈跳高度)

def 產生_隨機速率():
    速率 = random.randint(松鼠最慢移動速率, 松鼠最快移動速率)
    if random.randint(0, 1) == 0:
        return 速率
    else:
        return -速率


def 取_鏡頭位置(鏡頭位置_橫軸, 鏡頭位置_縱軸, 物件_寬, 物件_高):
    
    物件_鏡頭 = pygame.Rect(鏡頭位置_橫軸, 鏡頭位置_縱軸, 螢幕寬, 螢幕高)
    while True:
        橫軸 = random.randint(鏡頭位置_橫軸 - 螢幕寬, 鏡頭位置_橫軸 + (2 * 螢幕寬))
        縱軸 = random.randint(鏡頭位置_縱軸 - 螢幕高, 鏡頭位置_縱軸 + (2 * 螢幕高))
        
        物件_方框 = pygame.Rect(橫軸, 縱軸, 物件_寬, 物件_高)
        if not 物件_方框.colliderect(物件_鏡頭):
            return 橫軸, 縱軸


def 產生_新松鼠(鏡頭位置_橫軸, 鏡頭位置_縱軸):
    新松鼠 = {}
    普通大小 = random.randint(5, 25)
    放大倍數 = random.randint(1, 3)
    新松鼠['寬']  = (普通大小 + random.randint(0, 10)) * 放大倍數
    新松鼠['高'] = (普通大小 + random.randint(0, 10)) * 放大倍數
    新松鼠['橫軸'], 新松鼠['縱軸'] = 取_鏡頭位置(鏡頭位置_橫軸, 鏡頭位置_縱軸, 新松鼠['寬'], 新松鼠['高'])
    新松鼠['橫向移動單位'] = 產生_隨機速率()
    新松鼠['縱向移動單位'] = 產生_隨機速率()
    if 新松鼠['橫向移動單位'] < 0: 
        新松鼠['圖_玩家松鼠'] = pygame.transform.scale(向左_松鼠_圖, (新松鼠['寬'], 新松鼠['高']))
    else: 
        新松鼠['圖_玩家松鼠'] = pygame.transform.scale(向右_松鼠_圖, (新松鼠['寬'], 新松鼠['高']))
    新松鼠['彈跳'] = 0
    新松鼠['彈跳次數間隔'] = random.randint(10, 18)
    新松鼠['彈跳高度'] = random.randint(10, 50)
    return 新松鼠


def 設置草堆(鏡頭位置_橫軸, 鏡頭位置_縱軸):
    新草堆 = {}
    新草堆['圖_草堆'] = random.randint(0, len(草堆_圖) - 1)
    新草堆['寬']  = 草堆_圖[0].get_width()
    新草堆['高'] = 草堆_圖[0].get_height()
    新草堆['橫軸'], 新草堆['縱軸'] = 取_鏡頭位置(鏡頭位置_橫軸, 鏡頭位置_縱軸, 新草堆['寬'], 新草堆['高'])
    新草堆['rect'] = pygame.Rect( (新草堆['橫軸'], 新草堆['縱軸'], 新草堆['寬'], 新草堆['高']) )
    return 新草堆


def 是否超出鏡頭範圍(鏡頭位置_橫軸, 鏡頭位置_縱軸, 物件):
    
    左邊界 = 鏡頭位置_橫軸 - 螢幕寬
    上邊界 = 鏡頭位置_縱軸 - 螢幕高
    邊界方框 = pygame.Rect(左邊界, 上邊界, 螢幕寬 * 3, 螢幕高 * 3)
    物件_方框 = pygame.Rect(物件['橫軸'], 物件['縱軸'], 物件['寬'], 物件['高'])
    return not 邊界方框.colliderect(物件_方框)


if __name__ == '__main__':
    主程式()
